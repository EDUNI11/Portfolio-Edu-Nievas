---
import ChangeTheme from "./ChangeTheme.astro";
import SelectLenguage from "./SelectLenguage.astro";

const { translations } = Astro.props;

const navElements = [
    {
        id: 1,
        link: "proyectos",
        title: translations.projects.projectsTitle,
    },
    {
        id: 2,
        link: "tecnologias",
        title: translations.technologies.technologiesTitle,
    },
    {
        id: 3,
        link: "sobre-mi",
        title: translations.aboutMe.aboutMeTitle,
    },
    {
        id: 4,
        link: "experiencia",
        title: translations.experience.navTitle,
    },
    {
        id: 5,
        link: "https://www.linkedin.com/in/eduni",
        title: translations.contact,
        isContact: true,
    },
]
---
<nav id="scroll-nav" class="hidden lg:block animate-slide-in-top z-[100] not-scrolled sticky top-2 mx-auto w-fit h-auto rounded-[1.3em] p-2 items-center">
    <div class="flex justify-evenly content-evenly place-content-evenly">
        {
            navElements.map((element) => {
                const target = element?.isContact ? "_blank" : "_self";
                const rel = element?.isContact ? "noopener noreferrer" : "";
                const href = element?.isContact ? element.link : `#${element.link}`;

                return <a href={href} target={target} rel={rel} class="text-xs text-[--principal-text-color] py-4 px-8 font-bold rounded-xl hover:bg-[--secondary-low-opacity]">
                    {element.title}
                </a>
            })
        }
        <SelectLenguage translations={translations}/>
        <ChangeTheme/>
    </div>
</nav>

<nav class="w-full lg:hidden sticky bg-[--primary-low-opacity] backdrop-blur-[15px] z-[100] top-0 h-auto flex items-center justify-between">
    <div>
        <img src="/img/me.webp" alt="Edu Nievas" class="w-10 md:my-4 md:mx-4 my-2 mx-2 md:w-12 h-auto rounded-full"/>
    </div>
    <div class="text-white mx-2 md:mx-4 my-2 md:my-4">
        <button id="menu-button" name="Botón del menú" class="block">
            <svg class="size-8 md:size-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 6l16 0"></path>
                <path d="M4 12l16 0"></path>
                <path d="M4 18l16 0"></path>
            </svg>
        </button>
        <button id="close-menu-button" name="Botón de cerrar el menú" class="hidden">
            <svg class="size-8 md:size-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 6l-12 12"></path>
                <path d="M6 6l12 12"></path>
            </svg>
        </button>
    </div>
</nav>

<main id="menu" class="hidden h-[100dvh] z-[101] top-0">
    <div class="fixed w-full h-full bg-[--primary-low-opacity] backdrop-blur-[15px] z-[100]">
        <div class="ml-auto w-fit flex flex-col mt-8 mr-6 text-center">
            {
                navElements.map((element) => {
                    const target = element?.isContact ? "_blank" : "_self";
                    const rel = element?.isContact ? "noopener noreferrer" : "";
                    const href = element?.isContact ? element.link : `#${element.link}`;

                    return <div class="fit-content">
                        <a id={`${element.id}`} href={href} target={target} rel={rel} class="text-xs group text-[--principal-text-color] px-8 font-bold transition-all duration-300">
                            {element.title}
                        </a>
                        <hr class="w-full border-t-[--navbar-border] group-hover:scale-105 mb-12 mt-2"/>
                    </div>
                })
            }
            <SelectLenguage translations={translations}/>
        </div>
    </div>
</main>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const menuButton = document.getElementById("menu-button");
        const closeMenuButton = document.getElementById("close-menu-button");

        const menu = document.getElementById("menu");

        const navElements = document.querySelectorAll("#menu a");

        navElements.forEach((element) => {
            element.addEventListener("click", () => {
                menuButton?.classList.toggle("hidden");
                menu?.classList.toggle("hidden");
                closeMenuButton?.classList.toggle("hidden");
                document.body.classList.toggle("overflow-hidden");
            });
        });


        menuButton?.addEventListener("click", () => {
            menuButton?.classList.toggle("hidden");
            menu?.classList.toggle("hidden");
            closeMenuButton?.classList.toggle("hidden");
            document.body.classList.toggle("overflow-hidden");
        });

        closeMenuButton?.addEventListener("click", () => {
            menuButton?.classList.toggle("hidden");
            closeMenuButton?.classList.toggle("hidden");
            menu?.classList.toggle("hidden");
            document.body.classList.toggle("overflow-hidden");
        });

        const scrollNav = document.getElementById("scroll-nav");

        const moonColorIcon = document.getElementById("moon-theme-icon");
        const sunColorIcon = document.getElementById("sun-theme-icon");

        window.addEventListener("scroll", () => {
            if (window.scrollY > 100) {
                scrollNav?.classList.remove("not-scrolled");
                scrollNav?.classList.add("scrolled");
                sunColorIcon?.setAttribute("width", "1rem");
                moonColorIcon?.setAttribute("width", "1rem");
            } else {
                scrollNav?.classList.remove("scrolled");
                scrollNav?.classList.add("not-scrolled");
                sunColorIcon?.setAttribute("width", "1.3rem");
                moonColorIcon?.setAttribute("width", "1.3rem");
            }
        });
    });
</script>